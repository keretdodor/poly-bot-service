name: Terraform CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    name: Terraform Infrastructure
    runs-on: ubuntu-latest
     
    defaults:
      run:
        working-directory: ./tf 

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.0

      # Step 3: Configure AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }} # Or you can use ${{ secrets.AWS_REGION }} if set in secrets

      # Step 4: Initialize Terraform
      - name: Terraform Init 
        run: terraform init -var="aws_region=${{ vars.AWS_REGION }}"

      # Step 5: Validate Terraform syntax
      - name: Terraform Validate
        run: terraform validate

      # Step 6: Terraform Format Check
      - name: Terraform Format
        run: terraform fmt -check

      # Step 7: Terraform Plan
      - name: Terraform Plan
        run: terraform plan -var="aws_region=${{ vars.AWS_REGION }}"

      # Optional: Step 8: Apply (controlled, often manual step)
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -var="aws_region=${{ vars.AWS_REGION }}" -auto-approve

      - name: Get Terraform Outputs
        id: tfout
        run: |
           echo "polybot_public_ips=$(terraform output -raw polybot_public_ips)" >> "$GITHUB_OUTPUT"
           echo "dynamodb_table_name=$(terraform output -raw dynamodb_table_name)" >> "$GITHUB_OUTPUT"
           echo "sqs_queue_url=$(terraform output -raw sqs_queue_url)" >> "$GITHUB_OUTPUT"
           echo "bucket_name=$(terraform output -raw bucket_name)" >> "$GITHUB_OUTPUT"
           echo "alias_record=$(terraform output -raw alias_record)" >> "$GITHUB_OUTPUT"

    outputs:
          polybot_public_ips: ${{ steps.tfout.outputs.polybot_public_ips }}
          dynamodb_table_name: ${{ steps.tfout.outputs.dynamodb_table_name }}
          sqs_queue_url: ${{ steps.tfout.outputs.sqs_queue_url }}
          s3_bucket: ${{ steps.tfout.outputs.bucket_name }}
          alias_record: ${{ steps.tfout.outputs.alias_record }}
          
  

  ansible:
    name: Ansible Configuration
    runs-on: ubuntu-latest
    needs: terraform  

    defaults:
      run:
        working-directory: ./infrastructure/ansible/

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Test outputs
        run: |
          echo "Polybot Public IPs: ${{ needs.terraform.outputs.polybot_public_ips }}"
          echo "DynamoDB Table Name: ${{ needs.terraform.outputs.dynamodb_table_name }}"
          echo "SQS Queue URL: ${{ needs.terraform.outputs.sqs_queue_url }}"
          echo "Bucket Name: ${{ needs.terraform.outputs.s3_bucket }}"
          echo "Alias Record: ${{ needs.terraform.outputs.alias_record }}"

      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: Print Terraform Outputs
        run: |
            echo "IPs ${{ needs.outputs.out}} 
        shell: bash

      - name: Create Ansible Inventory
        run: | 
          echo "[polybot]" > inventory.ini
          echo "${{ fromJson(needs.terraform.outputs.polybot_public_ips) }}" | jq -r '.[]' >> inventory.ini
          cat inventory.ini
        shell: bash

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i inventory.ini playbook.yaml \
          --extra-vars "dynamodb_table_name=${{ needs.terraform.outputs.dynamodb_table_name }} \
          sqs_queue_url=${{ needs.terraform.outputs.sqs_queue_url }} \
          bucket_name=${{ needs.terraform.outputs.bucket_name }} \
          aws_region=${{ vars.AWS_REGION }}"
        shell: bash
